generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model admin {
  id String @id

  @@map("admin")
}

model User {
  id         String @id @default(uuid())
  name       String
  surname    String
  email      String @unique
  password   String
  nickname   String @unique
  bio        String @default("")
  skills     String @default("")
  profilePic String @default("")

  PrivateMessages PrivateMessages[]
  messages        Messages[]
  posts           Posts[]
  comments        Comments[]
  likedPosts      LikedsPosts[]

  cpf String? @unique
  rg  String? @unique

  @@map("users") // Use a forma no plural para refletir a tabela real no banco de dados
}

model ChatRoom {
  id   String @id @default(uuid())
  name String @unique

  messages Messages[]

  @@map("chat_rooms") // Use underscore_case para refletir a tabela real no banco de dados
}

model Messages {
  id      String @id @default(uuid())
  author  String
  content String
  room    String
  hour    String

  roomSended ChatRoom @relation(fields: [room], references: [name])
  creator    User     @relation(fields: [author], references: [nickname])

  @@map("messages")
}

model PrivateMessages {
  id      String @id @default(uuid())
  author  String
  content String
  to      String

  creator User @relation(fields: [author], references: [nickname])

  @@map("PrivateMessages")
}

model Posts {
  id        String   @id @default(uuid())
  title     String
  content   String
  author    String
  type      String?  @default("post")
  createdAt DateTime @default(now())

  likes       Int           @default(0)
  comments    Comments[]
  likedsposts LikedsPosts[]

  creator User @relation(fields: [author], references: [nickname])

  @@map("posts")
}

model LikedsPosts {
  id     String @id @default(uuid())
  author String
  postId String

  user User  @relation(fields: [author], references: [nickname])
  post Posts @relation(fields: [postId], references: [id])

  @@map("likedsPosts")
}

model Comments {
  id         String @id @default(uuid())
  content    String
  authorNick String
  postId     String
  likes      Int    @default(0)
  image      String @default("none")

  author    User     @relation(fields: [authorNick], references: [nickname])
  post      Posts    @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())

  @@map("comments")
}
